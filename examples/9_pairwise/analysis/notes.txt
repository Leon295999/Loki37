Re-formatting into a resonable table

trj_durations.py --column all

This analysis code turns the internal flow representation into a useful
tabular dataset. It will always output "duration" and "amount". The other
available columns are "fraction", "categ", "motif", "account, "timestamps".

`account_durations_lifo.csv`
`account_durations_mixed.csv`

  Again, this example takes the perspective of a single account, so there is 
  nothing complicated going on here. One-to-one correspondence between the 
  flows and the durations. Notice how the variables are passed over.

`network_durations_lifo.csv`
`network_durations_mixed.csv`

  Notice how the variables are passed over from the pairwise flow file. As 
  these durations come from a network, several involve transfers.

`network_durations_mixed_sm30000_min.csv`

  No outside information is needed to get the exact and lower-bound durations.

  This is the approximation where it is as if untracked funds are "removed": 
  Exact durations are reported as such, and the durations reported for untracked 
  funds are the lower bound. In this scenario the pairs involving existing funds 
  are stubs with instantanous durations that should be filtered out.

`network_durations_mixed_sm30000_max_inf.csv`
`network_durations_mixed_sm30000_max.csv`

  With a given `--timestamp_start` it is possible to get upper-bound durations.

  This is the approximation where it is as if untracked funds are "static": 
  Exact durations are reported as such, and the durations reported for untracked 
  funds are the upper bound. In this scenario the existing funds have always been
  present (from `--timestamp_start`) and untracked funds will never move again. 
  Here it is the pairs involving untracked funds that should be filtered out. If
  these max durations being infinite is a problem, give also a `--timestamp_end`.

  Note that it would never make sense to keep pairs involving both existing and 
  untracked funds. They are two halves of the same whole; pick one or the other.